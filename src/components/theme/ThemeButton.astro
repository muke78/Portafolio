---
import { dataColorTheme } from "../../utils/dataColorsTheme.astro";
---

<li>
  <details id="theme-dropdown">
    <summary class="list-none cursor-pointer">
      <svg width="20" height="20" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="inline-block h-5 w-5 stroke-current md:h-6 md:w-6">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01"></path>
      </svg> 
      <span class="hidden md:inline cursor-pointer">Temas</span>
    </summary>
    <ul class="absolute top-20 p-2 flex flex-col gap-2 right-2 bg-base-100 rounded-md z-50 w-[12rem] h-[20.6rem] overflow-y-auto overflow-x-hidden"> 
      {dataColorTheme.map(({ colors, name }) => ( 
      <div class="flex items-center justify-start">
        <button class=" rounded-btn text-base-content cursor-pointer block w-full outline-base-content text-start outline-offset-4" data-act-class="[&_svg]:visible" data-set-theme={name} data-theme={name} id="themeButton">
          <span class="col-span-5 row-span-3 row-start-1 flex items-center gap-2 px-4 py-3">
            <svg id="svg-theme" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="invisible h-3 w-3 shrink-0">
              <path d="M20.285 2l-11.285 11.567-5.286-5.011-3.714 3.716 9 8.728 15-15.285z"></path>
            </svg>
            <span class="flex-grow text-sm">{name}</span>
            <span class="flex h-full shrink-0 flex-wrap p-0.5"> 
              {colors.map((color) => ( <span class={`w-2 h-3 m-0.5 rounded-badge border ${color}`}></span> ))} </span>
          </span>
        </button>
      </div> ))} </ul>
  </details>
</li>
<script>
  document.addEventListener('click', (event: MouseEvent) => {
    const dropdown = document.getElementById('theme-dropdown');
    if (!dropdown.contains(event.target as Node)) {
      dropdown.removeAttribute('open');
    }
  });
  document.addEventListener('DOMContentLoaded', () => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
        setTheme(savedTheme);
        setActiveButton(savedTheme);
    }

    document.querySelectorAll('[data-set-theme]').forEach(button => {
        button.addEventListener('click', () => {
            const theme = button.getAttribute('data-set-theme');
            localStorage.setItem('theme', theme);
            setTheme(theme);
            setActiveButton(theme, button);
        });
    });

    function setTheme(theme) {
        document.documentElement.setAttribute('data-theme', theme);
    }

    function setActiveButton(theme, activeButton = null) {
        document.querySelectorAll('[data-set-theme]').forEach(btn => {
            const btnActClass = btn.getAttribute("data-act-class");
            const btnSvgElement = btn.querySelector("svg");

            // Eliminar la clase activa y ocultar SVG
            if (btnActClass) {
                btn.classList.remove(btnActClass);
                if (btnSvgElement) {
                    btnSvgElement.classList.remove("visible");
                    btnSvgElement.classList.add("invisible");
                }
            }

            // Si el botón es el activo, añadir clase activa y mostrar SVG
            if (btn === activeButton) {
                if (btnActClass) {
                    btn.classList.add(btnActClass);
                    if (btnSvgElement) {
                        btnSvgElement.classList.remove("invisible");
                        btnSvgElement.classList.add("visible");
                    }
                }
            }
        });
    }
});
</script>
<style>
  .invisible {
    display: none;
    /* O cualquier propiedad que oculte el SVG */
  }

  .visible {
    /* O cualquier propiedad que muestre el SVG */
    display: block;
  }
</style>